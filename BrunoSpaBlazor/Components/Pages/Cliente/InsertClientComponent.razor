@using System.Text.Json
@rendermode InteractiveServer
@inject UsuarioService UsuarioService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<Card Class="card mb-3">
    <CardBody>
        <CardTitle>Creacion de Clientes</CardTitle>
        <CardSubTitle Class="mb-2 text-muted">Crea un cliente con sus datos basicos </CardSubTitle>
        <EditForm Model="GetUsuario" OnValidSubmit="AgregarUsuario">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="Nombre">Nombre:</label>
                <InputText id="TxtNombre" @bind-Value="GetUsuario.NombreUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.NombreUsuario)" />
            </div>
            <div>
                <label for="Apellido">Apellido:</label>
                <InputText id="TxtApellido" @bind-Value="GetUsuario.ApellidoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.ApellidoUsuario)" />
            </div>
            <div>
                <label for="Documento">Documento:</label>
                <InputText id="TxtDocumento" @bind-Value="GetUsuario.DocumentoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.DocumentoUsuario)" />
            </div>
            <div>
                <label for="CorreoElectronico">Correo Electronico:</label>
                <InputText id="TxtCoreoElectronico" @bind-Value="GetUsuario.CorreoElectronicoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.CorreoElectronicoUsuario)" />
            </div>
            <div>
                <label for="Edad">Edad:</label>
                <InputNumber id="TxtEdad" @bind-Value="GetUsuario.EdadUsuario" class="form-control" @onblur="CalculaFechaNacimiento" Max="100" />
                <ValidationMessage For="@(() => GetUsuario.EdadUsuario)" />
            </div>
            <div>
                <label for="FechaNacimiento">Fecha de Nacimiento:</label>
                <InputDate id="TxtFechaNacimiento" @bind-Value="GetUsuario.FechaNacimientoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.FechaNacimientoUsuario)" />
            </div>
            <div class="d-flex justify-content-end mt-3">
                <Toasts class="p-3" Messages="Avisos" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
                <button class="btn btn-primary" type="submit">Agregar</button>
            </div>
        </EditForm>
    </CardBody>
</Card>
@* <GetClientComponent GetUsuarioDesdeCliente="PerriUsuarios"/> *@
@code {
    public List<UsuarioModel> PerriUsuarios = new List<UsuarioModel>();
    List<ToastMessage> Avisos = new List<ToastMessage>();
    private void ShowMessage(ToastType toastType, string message) => Avisos.Add(CreateToastMessage(toastType, message));
    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
    UsuarioModel GetUsuario = new UsuarioModel();
    private List<string> messages = new List<string>();

    private async void AgregarUsuario()
    {
        UsuarioService.AgregarUsuario(GetUsuario);
        ShowMessage(ToastType.Success, "Usuario agregado exitosamente.");
        await SaveToSessionStorage();
        LimpiarFormulario();
        // Muestrelos();
    }

    
    // public void Muestrelos()
    // {
    //     PerriUsuarios = UsuarioService.ObtenerUsuarios();
    // }

    private void CalculaFechaNacimiento()
    {
        int anioNacimiento = DateTime.Now.Year - GetUsuario.EdadUsuario;
        int mes = GetUsuario.FechaNacimientoUsuario.Month > 0 ? GetUsuario.FechaNacimientoUsuario.Month : 1;
        int dia = GetUsuario.FechaNacimientoUsuario.Day > 0 ? GetUsuario.FechaNacimientoUsuario.Day : 1;
        GetUsuario.FechaNacimientoUsuario = new DateOnly(anioNacimiento, mes, dia);
    }

    private void LimpiarFormulario()
    {
        GetUsuario = new UsuarioModel
            {
                FechaNacimientoUsuario = DateOnly.FromDateTime(DateTime.Now)
            };
        StateHasChanged();
    }

    private async Task SaveToSessionStorage()
    {

        try
        {
            // Serializar el objeto GetUsuario a JSON
            string usuarioJson = JsonSerializer.Serialize(GetUsuario);

            // Guardar la cadena JSON en la variable de sesión
            await sessionStorage.SetItemAsync("UsuarioSession", usuarioJson);
        }
        catch (Exception ex)
        {
            // Manejo de errores, por ejemplo, loguear el error
            Console.WriteLine($"Error al guardar en sesión: {ex.Message}");
        }


        // string ValorVariableSesion = GetUsuario.NombreUsuario;
        // await sessionStorage.SetItemAsync("ValorSession", ValorVariableSesion);
    }
}