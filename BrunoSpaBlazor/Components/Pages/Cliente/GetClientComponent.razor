@rendermode InteractiveServer
@inject UsuarioService UsuarioService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<Card Class="card mb-3">
    <CardBody>
        <div class="d-flex justify-content-between align-items-center">
            <CardTitle>Lista de Clientes</CardTitle>
            <button class="btn btn-primary btn-sm ml-auto" @onclick="RecuperarUsuariosAsync">Mostrar Datos</button>
        </div>
        <CardSubTitle Class="mb-2 text-muted">Lista de Usuarios del Sistema</CardSubTitle>
        @if (UsuarioService.ObtenerUsuarios() == null || !UsuarioService.ObtenerUsuarios().Any())
        {
            <div class="d-flex justify-content-center align-items-center" style="height: 60vh;">
                <h3>No hay Data</h3>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Documento</th>
                            <th>Correo Electronico</th>
                            <th>Edad</th>
                            <th>Fecha de Nacimiento</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in ListaUsuario)
                        {
                            <tr>
                                <td>@usuario.IdUsuario</td>
                                <td>@usuario.NombreUsuario</td>
                                <td>@usuario.ApellidoUsuario</td>
                                <td>@usuario.DocumentoUsuario</td>
                                <td>@usuario.CorreoElectronicoUsuario</td>
                                <td>@usuario.EdadUsuario</td>
                                <td>@usuario.FechaNacimientoUsuario</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="OnShowModalClick">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarUsuario(usuario.IdUsuario)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </CardBody>
</Card>

<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>
        <EditForm Model="GetUsuario">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="Nombre">Nombre:</label>
                <InputText id="TxtNombre" @bind-Value="GetUsuario.NombreUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.NombreUsuario)" />
            </div>
            <div>
                <label for="Apellido">Apellido:</label>
                <InputText id="TxtApellido" @bind-Value="GetUsuario.ApellidoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.ApellidoUsuario)" />
            </div>
            <div>
                <label for="Documento">Documento:</label>
                <InputText id="TxtDocumento" @bind-Value="GetUsuario.DocumentoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.DocumentoUsuario)" />
            </div>
            <div>
                <label for="Correo">Correo:</label>
                <InputText id="TxtCorreo" @bind-Value="GetUsuario.CorreoElectronicoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.CorreoElectronicoUsuario)" />
            </div>
            <div>
                <label for="FechaNacimiento">Fecha de Nacimiento:</label>
                <InputDate id="TxtFechaNacimiento" @bind-Value="GetUsuario.FechaNacimientoUsuario" class="form-control" />
                <ValidationMessage For="@(() => GetUsuario.FechaNacimientoUsuario)" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Guardar Cambios</Button>
    </FooterTemplate>
</Modal>

@code {

    private List<UsuarioModel> ListaUsuario = new List<UsuarioModel>();

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    string Mensaje = "";
    #region Variables Globales
    UsuarioModel GetUsuario = new UsuarioModel();
    bool isEditing = false;
    #endregion

    #region Notificacion Toast
    List<ToastMessage> Avisos = new List<ToastMessage>();
    private void ShowMessage(ToastType toastType, string message) => Avisos.Add(CreateToastMessage(toastType, message));
    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
    #endregion

    private async Task RecuperarUsuariosAsync()
    {
        var usuarios = await sessionStorage.GetItemAsync<List<UsuarioModel>>("UsuarioSession");
        if (usuarios.Count != 0)
        {
            ListaUsuario = usuarios;
        }
        else
        {
            Mensaje = "Melo";
        }
    }

    private void EditarUsuario(UsuarioModel usuario)
    {

        GetUsuario = usuario;
        isEditing = true;
    }

    private void EliminarUsuario(int idUsuario)
    {
        try
        {
            UsuarioService.EliminarUsuario(idUsuario);
            ListaUsuario = UsuarioService.ObtenerUsuarios(); // Actualizar la lista de usuarios
            ShowMessage(ToastType.Success, "Usuario agregado exitosamente.");
        }
        catch (Exception ex)
        {
            // Manejo de errores
            Console.WriteLine($"Error al eliminar usuario: {ex.Message}");
        }
    }
    

    private void LimpiarFormulario()
    {
        GetUsuario = new UsuarioModel
            {
                FechaNacimientoUsuario = DateOnly.FromDateTime(DateTime.Now)
            };
        StateHasChanged();
    }
}